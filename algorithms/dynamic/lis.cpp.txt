
#include <iostream>
#include <vector>
#include <queue>

//Logic we will use LCS of arr and sorted arr
int LIS(std::vector<int>arr)
{
    std::vector<int>srtarr = arr;
    std::sort(srtarr.begin(), srtarr.end());
    int n = arr.size();
    int m = srtarr.size();
    std::vector<std::vector<int>> t(n + 1, std::vector<int>(m + 1, 0));

    for (int i = 1; i < n + 1; i++)
    {
        for (int j = 1; j < m + 1; j++)
        {
            if (arr[i - 1] == srtarr[j - 1])
            {
                t[i][j] = 1 + t[i - 1][j - 1];
            }
            else
            {
                t[i][j] = std::max(t[i - 1][j], t[i][j - 1]);
            }
        }
    }
    return t[n][m];
}

int main()
{
    
    std::vector<int>v{ 3, 2 };

    std::cout << "\n LONGEST INCREAING SUBSEQUENCE = " << LIS(v) << "\n";;
}


